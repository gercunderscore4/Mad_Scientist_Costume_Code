# https://stackoverflow.com/questions/20304438/how-can-i-use-the-python-imaging-library-to-create-a-bitmap
#from PIL import Image
#
#img = Image.new( 'RGB', (255,255), "black") # Create a new black image
#pixels = img.load() # Create the pixel map
#for i in range(img.size[0]):    # For every pixel:
#    for j in range(img.size[1]):
#        pixels[i,j] = (i, j, 100) # Set the colour accordingly
#
#img.show()

# https://stackoverflow.com/questions/753190/programmatically-generate-video-or-animated-gif-in-python
#import imageio
#images = []
#for filename in filenames:
#    images.append(imageio.imread(filename))
#imageio.mimsave('/path/to/movie.gif', images, duration = 1)


from PIL import Image
import imageio
from math import ceil, sqrt
from random import randint
import os
import shutil

###############
# PRINT SCALE #
###############

r = [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254, 252, 250, 247, 245, 243, 241, 239, 238, 236, 234, 233, 231, 229, 228, 227, 225, 224, 223, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 207, 206, 205, 204, 204, 203, 202, 202, 201, 200, 200, 199, 198, 198, 197, 197, 196, 196, 195, 195, 194, 194, 193, 193, 192, 192, 191, 191, 190, 190, 190, 189, 189, 188, 188, 188, 187, 187, 187, 186, 186, 186, 185, 185, 185, 184, 184, 184, 184, 183, 183, 183, 182, 182, 182, 182, 181, 181, 181, 181, 180, 180, 180, 180, 179, 179, 179, 179, 179, 178, 178, 178, 178, 178, 177, 177, 177, 177, 177, 176, 176, 176, 176, 176, 176, 175, 175, 175, 175, 175, 175, 174, 174, 174, 174, 174, 174, 174, 173, 173, 173, 173, 173, 173, 173, 173, 172, 172, 172, 172, 172, 172, 172, 172, 171, 171, 171, 171, 171, 171, 171, 171, 171, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161]
g = [ 51,  69,  82,  93, 102, 111, 118, 124, 130, 135, 141, 146, 152, 157, 162, 166, 170, 174, 178, 182, 185, 189, 192, 195, 198, 201, 203, 206, 208, 211, 213, 215, 217, 219, 221, 223, 225, 226, 228, 229, 231, 232, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 249, 250, 248, 247, 245, 244, 243, 241, 240, 239, 238, 237, 236, 234, 233, 233, 232, 231, 230, 229, 228, 227, 226, 226, 225, 224, 223, 223, 222, 221, 221, 220, 220, 219, 218, 218, 217, 217, 216, 216, 215, 215, 214, 214, 213, 213, 212, 212, 212, 211, 211, 210, 210, 210, 209, 209, 208, 208, 208, 207, 207, 207, 206, 206, 206, 206, 205, 205, 205, 204, 204, 204, 204, 203, 203, 203, 203, 202, 202, 202, 202, 201, 201, 201, 201, 201, 200, 200, 200, 200, 200, 199, 199, 199, 199, 199, 198, 198, 198, 198, 198, 198, 197, 197, 197, 197, 197, 197, 196, 196, 196, 196, 196, 196, 196, 195, 195, 195, 195, 195, 195, 195, 194, 194, 194, 194, 194, 194, 194, 194, 194, 193, 193, 193, 193, 193, 193, 193, 193, 193, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 191, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 190, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 189, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 188, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 185, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 184, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183]
b = [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,  29,  41,  51,  60,  69,  77,  84,  91,  98, 105, 111, 118, 124, 130, 135, 141, 146, 151, 156, 161, 166, 171, 175, 180, 184, 188, 192, 196, 200, 204, 208, 211, 215, 218, 222, 225, 228, 231, 234, 237, 240, 243, 245, 248, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]

# add frames for colder temperatures (just dim, assume linear)
dv = (g[1] - g[0])/2
nv = int(ceil(r[0]/dv))
nr = [int(max(0,r[0]-dv*i)) for i in range(nv)]
ng = [int(max(0,g[0]-dv*i)) for i in range(nv)]
nb = [int(max(0,b[0]-dv*i)) for i in range(nv)]
nr.reverse()
ng.reverse()
nb.reverse()
r = nr + r
g = ng + g
b = nb + b

n = len(r)
h = max(1,n//10)

# decide how hot it can be
n = n//8;

img = Image.new('RGB', (n,h), "black") # create a new black image
pixels = img.load() # create the pixel map
for i in range(img.size[0]):    # for every pixel:
    for j in range(img.size[1]):
        pixels[i,j] = (r[i], g[i], b[i]) # set the colour accordingly
img.save("blackbody_scale.bmp") 
img.close()

#####################
# MAKE FIRE LED GIF #
#####################

# ((random(201) * random(201)) / 100) % BLACKBODY_COUNT
foldername = os.path.join(os.getcwd(),'frames')
if os.path.isdir(foldername):
    shutil.rmtree(foldername)
os.mkdir(foldername)
gif_list = []
w = 15
h = 15
duration = 5000 
sq = int(sqrt(n * 100)) + 1
crawling_chaos = True
fire_period = 10 # ms
fire_change_count = 30

img = Image.new('RGB', (w,h), "black") # create a new black image
pixels = img.load() # create the pixel map
for i in range(img.size[0]):
    for j in range(img.size[1]):
        k = ((randint(0, sq) * randint(0, sq)) // 100) % n
        pixels[i,j] = (r[k], g[k], b[k])
for f in range(duration//fire_period):
    if crawling_chaos:
        # change a few pixels
        for j in range(fire_change_count):
            k = ((randint(0, sq) * randint(0, sq)) // 100) % n
            pixels[randint(1,w)-1,randint(1,w)-1] = (r[k], g[k], b[k])
    else:
        for i in range(img.size[0]):
            for j in range(img.size[1]):
                k = ((randint(0, sq) * randint(0, sq)) // 100) % n
                pixels[i,j] = (r[k], g[k], b[k])
    filepath = os.path.join(foldername, 'frame_{:04}.gif'.format(f))
    #print(filepath)
    gif_list.append(filepath)
    img.save(filepath) 
img.close()

images = []
for filepath in gif_list:
    images.append(imageio.imread(filepath))
imageio.mimsave('fire.gif', images, duration = fire_period/1000)
shutil.rmtree(foldername)

################
# WRITE C CODE #
################

with open('blackbody_header.h', 'w') as fout:
    fout.write('////////////////////////////////////////////////////////////////\n')
    fout.write('// BEGIN SECTION GENERATED BY blackbody_color_scale.py\n')
    fout.write('\n')

    fout.write('// http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n')
    fout.write('\n')

    fout.write('#define FIRE_PERIOD {}\n'.format(fire_period))
    fout.write('#define FIRE_CHANGE_COUNT {}\n'.format(fire_change_count))
    fout.write('\n')

    fout.write('#define BLACKBODY_COUNT {}\n'.format(n))
    fout.write('// the following makes a dreceasing random distribution\n')
    fout.write('#define GET_BLACKBODY_INDEX ((random({}) * random({})) / 100) % BLACKBODY_COUNT\n'.format(sq, sq))
    fout.write('\n')
    
    fout.write('const rgb_color blackbody[] = {')
    for i in range(n):
        fout.write('{{{},{},{}}}'.format(r[i], g[i], b[i]))
        if i < (n-1):
            fout.write(',')
    fout.write('};\n')
    #for i in range(n):
    #    fout.write('{{{:3}, {:3}, {:3}}}'.format(r[i], g[i], b[i]))
    #    if i < (n-1):
    #        fout.write(',\n                               ')
    #fout.write('};\n')
    fout.write('\n')
    
    fout.write('unsigned long last_fire;\n')
    fout.write('\n')
    
    fout.write('// END SECTION GENERATED BY blackbody_color_scale.py\n')
    fout.write('////////////////////////////////////////////////////////////////\n')

