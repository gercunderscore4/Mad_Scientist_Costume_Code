#include <APA102.h>

// Define which pins to use.
const uint8_t dataPin = 11;
const uint8_t clockPin = 12;

// Create an object for writing to the LED strip.
APA102<dataPin, clockPin> ledPort;

// Set the number of LEDs
#define FLUX_LED_COUNT 13
#define POINT_LED_COUNT 5
#define FIRE_LED_COUNT 213
#define FULL_LED_COUNT (FLUX_LED_COUNT + POINT_LED_COUNT + FIRE_LED_COUNT)

// Create a buffer for holding the colors (3 bytes per color).
rgb_color colors[FULL_LED_COUNT];
rgb_color* flux_colors  = &(colors[0]);
rgb_color* point_colors = &(flux_colors[FLUX_LED_COUNT]);
rgb_color* fire_colors  = &(point_colors[POINT_LED_COUNT]);

const uint16_t brightness = 31;

////////////////////////////////////////////////////////////////
// BEGIN SECTION GENERATED BY blackbody_color_scale.py

// http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html

#define BLACKBODY_COUNT 83
// the following makes a dreceasing random distribution
#define GET_BLACKBODY_INDEX ((random(92) * random(92)) / 100) % BLACKBODY_COUNT

const rgb_color blackbody[] = {{ 12,   0,   0},
                               { 21,   0,   0},
                               { 30,   0,   0},
                               { 39,   0,   0},
                               { 48,   0,   0},
                               { 57,   0,   0},
                               { 66,   0,   0},
                               { 75,   0,   0},
                               { 84,   0,   0},
                               { 93,   0,   0},
                               {102,   0,   0},
                               {111,   0,   0},
                               {120,   0,   0},
                               {129,   0,   0},
                               {138,   0,   0},
                               {147,   0,   0},
                               {156,   0,   0},
                               {165,   0,   0},
                               {174,   0,   0},
                               {183,   0,   0},
                               {192,   0,   0},
                               {201,   0,   0},
                               {210,   6,   0},
                               {219,  15,   0},
                               {228,  24,   0},
                               {237,  33,   0},
                               {246,  42,   0},
                               {255,  51,   0},
                               {255,  51,   0},
                               {255,  69,   0},
                               {255,  82,   0},
                               {255,  93,   0},
                               {255, 102,   0},
                               {255, 111,   0},
                               {255, 118,   0},
                               {255, 124,   0},
                               {255, 130,   0},
                               {255, 135,   0},
                               {255, 141,  11},
                               {255, 146,  29},
                               {255, 152,  41},
                               {255, 157,  51},
                               {255, 162,  60},
                               {255, 166,  69},
                               {255, 170,  77},
                               {255, 174,  84},
                               {255, 178,  91},
                               {255, 182,  98},
                               {255, 185, 105},
                               {255, 189, 111},
                               {255, 192, 118},
                               {255, 195, 124},
                               {255, 198, 130},
                               {255, 201, 135},
                               {255, 203, 141},
                               {255, 206, 146},
                               {255, 208, 151},
                               {255, 211, 156},
                               {255, 213, 161},
                               {255, 215, 166},
                               {255, 217, 171},
                               {255, 219, 175},
                               {255, 221, 180},
                               {255, 223, 184},
                               {255, 225, 188},
                               {255, 226, 192},
                               {255, 228, 196},
                               {255, 229, 200},
                               {255, 231, 204},
                               {255, 232, 208},
                               {255, 234, 211},
                               {255, 235, 215},
                               {255, 237, 218},
                               {255, 238, 222},
                               {255, 239, 225},
                               {255, 240, 228},
                               {255, 241, 231},
                               {255, 243, 234},
                               {255, 244, 237},
                               {255, 245, 240},
                               {255, 246, 243},
                               {255, 247, 245},
                               {255, 248, 248}};

// END SECTION GENERATED BY blackbody_color_scale.py
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
// BEGIN SECTION GENERATED BY sign_period.m

#define CURVE_LENGTH 256
#define MS_IN_S 3000
#define MIN_FREQ 43
#define FREQUENCY_COUNT 5
#define F_NUM CURVE_LENGTH
#define F_DEN (MS_IN_S * MIN_FREQ)

const unsigned int frequencies[] = {43*F_NUM, 47*F_NUM, 53*F_NUM, 59*F_NUM, 61*F_NUM};

const uint8_t curve[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 16, 17, 18, 20, 21, 23, 24, 26, 28, 30, 33, 35, 38, 40, 43, 46, 49, 53, 56, 60, 64, 68, 73, 77, 82, 87, 92, 97, 102, 108, 113, 119, 125, 131, 137, 144, 150, 156, 163, 169, 175, 181, 188, 194, 200, 205, 211, 216, 221, 226, 231, 235, 239, 242, 245, 248, 250, 252, 254, 255, 255, 255, 255, 254, 252, 250, 248, 245, 242, 239, 235, 231, 226, 221, 216, 211, 205, 200, 194, 188, 181, 175, 169, 163, 156, 150, 144, 137, 131, 125, 119, 113, 108, 102, 97, 92, 87, 82, 77, 73, 68, 64, 60, 56, 53, 49, 46, 43, 40, 38, 35, 33, 30, 28, 26, 24, 23, 21, 20, 18, 17, 16, 14, 13, 12, 11, 11, 10, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// END SECTION GENERATED BY sign_period.m
////////////////////////////////////////////////////////////////

unsigned long now;
unsigned long lastFire;

#define FLUX_STEP ((now / 130) % 4)
#define FLUX_ON  rgb_color(64, 39, 5)
#define FLUX_OFF rgb_color(  0,   0,   0)

/* Converts a color from HSV to RGB.
 * h is hue, as a number between 0 and 360.
 * s is the saturation, as a number between 0 and 255.
 * v is the value, as a number between 0 and 255. */
rgb_color hsvToRgb(uint16_t h, uint8_t s, uint8_t v)
{
    uint8_t f = (h % 60) * 255 / 60;
    uint8_t p = (255 - s) * (uint16_t)v / 255;
    uint8_t q = (255 - f * (uint16_t)s / 255) * (uint16_t)v / 255;
    uint8_t t = (255 - (255 - f) * (uint16_t)s / 255) * (uint16_t)v / 255;
    uint8_t r = 0, g = 0, b = 0;
    switch((h / 60) % 6){
        case 0: r = v; g = t; b = p; break;
        case 1: r = q; g = v; b = p; break;
        case 2: r = p; g = v; b = t; break;
        case 3: r = p; g = q; b = v; break;
        case 4: r = t; g = p; b = v; break;
        case 5: r = v; g = p; b = q; break;
    }
    return rgb_color(r, g, b);
}

inline uint8_t get_curve(unsigned int i) {
    return curve[((now * frequencies[i]) / F_DEN) % CURVE_LENGTH];
}

void setup()
{
    lastFire = 0;
    
    // zero all colors
    for (int i = 0; i < FULL_LED_COUNT; i++) {
      colors[i] = rgb_color(0, 0, 0);
    }
    ledPort.write(colors, FULL_LED_COUNT, brightness);
}

void loop()
{
    now = millis();
    
    // points
    for (unsigned int i = 0; i < POINT_LED_COUNT; i++) {
        point_colors[i] = rgb_color(get_curve(i), 0, 0);
    }
    
    // flux
    switch(FLUX_STEP)
    {
        case 0:
            flux_colors[ 0] = FLUX_ON;
            flux_colors[ 8] = FLUX_ON;
            flux_colors[12] = FLUX_ON;

            flux_colors[ 1] = FLUX_OFF;
            flux_colors[ 7] = FLUX_OFF;
            flux_colors[11] = FLUX_OFF;

            flux_colors[ 2] = FLUX_OFF;
            flux_colors[ 6] = FLUX_OFF;
            flux_colors[10] = FLUX_OFF;

            flux_colors[ 3] = FLUX_OFF;
            flux_colors[ 5] = FLUX_OFF;
            flux_colors[ 9] = FLUX_OFF;

            flux_colors[ 4] = FLUX_OFF;
            break;
        case 1:
            flux_colors[ 0] = FLUX_OFF;
            flux_colors[ 8] = FLUX_OFF;
            flux_colors[12] = FLUX_OFF;

            flux_colors[ 1] = FLUX_ON;
            flux_colors[ 7] = FLUX_ON;
            flux_colors[11] = FLUX_ON;

            flux_colors[ 2] = FLUX_OFF;
            flux_colors[ 6] = FLUX_OFF;
            flux_colors[10] = FLUX_OFF;

            flux_colors[ 3] = FLUX_OFF;
            flux_colors[ 5] = FLUX_OFF;
            flux_colors[ 9] = FLUX_OFF;

            flux_colors[ 4] = FLUX_OFF;
            break;
        case 2:
            flux_colors[ 0] = FLUX_OFF;
            flux_colors[ 8] = FLUX_OFF;
            flux_colors[12] = FLUX_OFF;

            flux_colors[ 1] = FLUX_OFF;
            flux_colors[ 7] = FLUX_OFF;
            flux_colors[11] = FLUX_OFF;

            flux_colors[ 2] = FLUX_ON;
            flux_colors[ 6] = FLUX_ON;
            flux_colors[10] = FLUX_ON;

            flux_colors[ 3] = FLUX_OFF;
            flux_colors[ 5] = FLUX_OFF;
            flux_colors[ 9] = FLUX_OFF;

            flux_colors[ 4] = FLUX_OFF;
            break;
        default:
            flux_colors[ 0] = FLUX_OFF;
            flux_colors[ 8] = FLUX_OFF;
            flux_colors[12] = FLUX_OFF;

            flux_colors[ 1] = FLUX_OFF;
            flux_colors[ 7] = FLUX_OFF;
            flux_colors[11] = FLUX_OFF;

            flux_colors[ 2] = FLUX_OFF;
            flux_colors[ 6] = FLUX_OFF;
            flux_colors[10] = FLUX_OFF;

            flux_colors[ 3] = FLUX_ON;
            flux_colors[ 5] = FLUX_ON;
            flux_colors[ 9] = FLUX_ON;

            flux_colors[ 4] = FLUX_OFF;
            break;
    }
    
    // fire
    if (now - lastFire > 100) {
        for (unsigned int i = 0; i < 20; i++) {
            fire_colors[random(FIRE_LED_COUNT)] = blackbody[GET_BLACKBODY_INDEX];
        }
        lastFire = now;
    }
    ledPort.write(colors, FULL_LED_COUNT, brightness);
}
